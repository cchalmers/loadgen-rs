/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    type size_t = usize;
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        pub type string = ::std::os::raw::c_void;
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod __detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub mod __find_detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub mod _bindgen_mod_id_16368 {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub mod __pointer_type_imp {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub mod __function {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub mod placeholders {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    pub mod mlperf {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type ResponseId = usize;
        pub type QuerySampleIndex = root::size_t;
        #[derive(Clone, Debug)]
        #[repr(C)]
        pub struct QuerySample {
            pub id: root::mlperf::ResponseId,
            pub index: root::mlperf::QuerySampleIndex,
        }
        #[test]
        fn bindgen_test_layout_QuerySample() {
            assert_eq!(
                ::std::mem::size_of::<QuerySample>(),
                16usize,
                concat!("Size of: ", stringify!(QuerySample))
            );
            assert_eq!(
                ::std::mem::align_of::<QuerySample>(),
                8usize,
                concat!("Alignment of ", stringify!(QuerySample))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<QuerySample>())).id as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(QuerySample),
                    "::",
                    stringify!(id)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<QuerySample>())).index as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(QuerySample),
                    "::",
                    stringify!(index)
                )
            );
        }
        #[repr(C)]
        pub struct QuerySampleResponse {
            pub id: root::mlperf::ResponseId,
            pub data: usize,
            pub size: root::size_t,
        }
        #[test]
        fn bindgen_test_layout_QuerySampleResponse() {
            assert_eq!(
                ::std::mem::size_of::<QuerySampleResponse>(),
                24usize,
                concat!("Size of: ", stringify!(QuerySampleResponse))
            );
            assert_eq!(
                ::std::mem::align_of::<QuerySampleResponse>(),
                8usize,
                concat!("Alignment of ", stringify!(QuerySampleResponse))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<QuerySampleResponse>())).id as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(QuerySampleResponse),
                    "::",
                    stringify!(id)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<QuerySampleResponse>())).data as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(QuerySampleResponse),
                    "::",
                    stringify!(data)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<QuerySampleResponse>())).size as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(QuerySampleResponse),
                    "::",
                    stringify!(size)
                )
            );
        }
        pub type QuerySampleLatency = i64;
        pub const TestScenario_SingleStream: root::mlperf::TestScenario = 0;
        pub const TestScenario_MultiStream: root::mlperf::TestScenario = 1;
        pub const TestScenario_MultiStreamFree: root::mlperf::TestScenario = 2;
        pub const TestScenario_Server: root::mlperf::TestScenario = 3;
        pub const TestScenario_Offline: root::mlperf::TestScenario = 4;
        pub type TestScenario = i32;
        pub const TestMode_SubmissionRun: root::mlperf::TestMode = 0;
        pub const TestMode_AccuracyOnly: root::mlperf::TestMode = 1;
        pub const TestMode_PerformanceOnly: root::mlperf::TestMode = 2;
        pub const TestMode_FindPeakPerformance: root::mlperf::TestMode = 3;
        pub type TestMode = i32;
        #[repr(C)]
        pub struct TestSettings {
            pub scenario: root::mlperf::TestScenario,
            pub mode: root::mlperf::TestMode,
            pub single_stream_expected_latency_ns: u64,
            pub single_stream_target_latency_percentile: f64,
            pub multi_stream_target_qps: f64,
            pub multi_stream_target_latency_ns: u64,
            pub multi_stream_target_latency_percentile: f64,
            pub multi_stream_samples_per_query: ::std::os::raw::c_int,
            pub multi_stream_max_async_queries: ::std::os::raw::c_int,
            pub server_target_qps: f64,
            pub server_target_latency_ns: u64,
            pub server_target_latency_percentile: f64,
            pub server_coalesce_queries: bool,
            pub server_find_peak_qps_decimals_of_precision: ::std::os::raw::c_int,
            pub server_find_peak_qps_boundary_step_size: f64,
            pub server_max_async_queries: u64,
            pub offline_expected_qps: f64,
            pub min_duration_ms: u64,
            pub max_duration_ms: u64,
            pub min_query_count: u64,
            pub max_query_count: u64,
            pub qsl_rng_seed: u64,
            pub sample_index_rng_seed: u64,
            pub schedule_rng_seed: u64,
            pub accuracy_log_rng_seed: u64,
            pub accuracy_log_probability: f64,
            pub print_timestamps: bool,
            pub performance_issue_unique: bool,
            pub performance_issue_same: bool,
            pub performance_issue_same_index: u64,
            pub performance_sample_count_override: u64,
        }
        #[test]
        fn bindgen_test_layout_TestSettings() {
            assert_eq!(
                ::std::mem::size_of::<TestSettings>(),
                208usize,
                concat!("Size of: ", stringify!(TestSettings))
            );
            assert_eq!(
                ::std::mem::align_of::<TestSettings>(),
                8usize,
                concat!("Alignment of ", stringify!(TestSettings))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TestSettings>())).scenario as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(scenario)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TestSettings>())).mode as *const _ as usize },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(mode)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).single_stream_expected_latency_ns
                        as *const _ as usize
                },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(single_stream_expected_latency_ns)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).single_stream_target_latency_percentile
                        as *const _ as usize
                },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(single_stream_target_latency_percentile)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).multi_stream_target_qps as *const _
                        as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(multi_stream_target_qps)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).multi_stream_target_latency_ns
                        as *const _ as usize
                },
                32usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(multi_stream_target_latency_ns)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).multi_stream_target_latency_percentile
                        as *const _ as usize
                },
                40usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(multi_stream_target_latency_percentile)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).multi_stream_samples_per_query
                        as *const _ as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(multi_stream_samples_per_query)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).multi_stream_max_async_queries
                        as *const _ as usize
                },
                52usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(multi_stream_max_async_queries)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).server_target_qps as *const _ as usize
                },
                56usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_target_qps)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).server_target_latency_ns as *const _
                        as usize
                },
                64usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_target_latency_ns)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).server_target_latency_percentile
                        as *const _ as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_target_latency_percentile)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).server_coalesce_queries as *const _
                        as usize
                },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_coalesce_queries)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>()))
                        .server_find_peak_qps_decimals_of_precision as *const _
                        as usize
                },
                84usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_find_peak_qps_decimals_of_precision)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).server_find_peak_qps_boundary_step_size
                        as *const _ as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_find_peak_qps_boundary_step_size)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).server_max_async_queries as *const _
                        as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(server_max_async_queries)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).offline_expected_qps as *const _
                        as usize
                },
                104usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(offline_expected_qps)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).min_duration_ms as *const _ as usize
                },
                112usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(min_duration_ms)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).max_duration_ms as *const _ as usize
                },
                120usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(max_duration_ms)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).min_query_count as *const _ as usize
                },
                128usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(min_query_count)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).max_query_count as *const _ as usize
                },
                136usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(max_query_count)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).qsl_rng_seed as *const _ as usize
                },
                144usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(qsl_rng_seed)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).sample_index_rng_seed as *const _
                        as usize
                },
                152usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(sample_index_rng_seed)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).schedule_rng_seed as *const _ as usize
                },
                160usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(schedule_rng_seed)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).accuracy_log_rng_seed as *const _
                        as usize
                },
                168usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(accuracy_log_rng_seed)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).accuracy_log_probability as *const _
                        as usize
                },
                176usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(accuracy_log_probability)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).print_timestamps as *const _ as usize
                },
                184usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(print_timestamps)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).performance_issue_unique as *const _
                        as usize
                },
                185usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(performance_issue_unique)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).performance_issue_same as *const _
                        as usize
                },
                186usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(performance_issue_same)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).performance_issue_same_index
                        as *const _ as usize
                },
                192usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(performance_issue_same_index)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<TestSettings>())).performance_sample_count_override
                        as *const _ as usize
                },
                200usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TestSettings),
                    "::",
                    stringify!(performance_sample_count_override)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN6mlperf12TestSettings10FromConfigERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_"]
            pub fn TestSettings_FromConfig(
                this: *mut root::mlperf::TestSettings,
                path: *const root::std::string,
                model: *const root::std::string,
                scenario: *const root::std::string,
            ) -> ::std::os::raw::c_int;
        }
        impl TestSettings {
            #[inline]
            pub unsafe fn FromConfig(
                &mut self,
                path: *const root::std::string,
                model: *const root::std::string,
                scenario: *const root::std::string,
            ) -> ::std::os::raw::c_int {
                TestSettings_FromConfig(self, path, model, scenario)
            }
        }
        pub const LoggingMode_AsyncPoll: root::mlperf::LoggingMode = 0;
        pub const LoggingMode_EndOfTestOnly: root::mlperf::LoggingMode = 1;
        pub const LoggingMode_Synchronous: root::mlperf::LoggingMode = 2;
        pub type LoggingMode = i32;
        #[repr(C)]
        pub struct LogOutputSettings {
            pub outdir: root::std::string,
            pub prefix: root::std::string,
            pub suffix: root::std::string,
            pub prefix_with_datetime: bool,
            pub copy_detail_to_stdout: bool,
            pub copy_summary_to_stdout: bool,
        }
        #[test]
        fn bindgen_test_layout_LogOutputSettings() {
            assert_eq!(
                ::std::mem::size_of::<LogOutputSettings>(),
                80usize,
                concat!("Size of: ", stringify!(LogOutputSettings))
            );
            assert_eq!(
                ::std::mem::align_of::<LogOutputSettings>(),
                8usize,
                concat!("Alignment of ", stringify!(LogOutputSettings))
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogOutputSettings>())).outdir as *const _ as usize
                },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogOutputSettings),
                    "::",
                    stringify!(outdir)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogOutputSettings>())).prefix as *const _ as usize
                },
                24usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogOutputSettings),
                    "::",
                    stringify!(prefix)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogOutputSettings>())).suffix as *const _ as usize
                },
                48usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogOutputSettings),
                    "::",
                    stringify!(suffix)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogOutputSettings>())).prefix_with_datetime as *const _
                        as usize
                },
                72usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogOutputSettings),
                    "::",
                    stringify!(prefix_with_datetime)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogOutputSettings>())).copy_detail_to_stdout as *const _
                        as usize
                },
                73usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogOutputSettings),
                    "::",
                    stringify!(copy_detail_to_stdout)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogOutputSettings>())).copy_summary_to_stdout as *const _
                        as usize
                },
                74usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogOutputSettings),
                    "::",
                    stringify!(copy_summary_to_stdout)
                )
            );
        }
        #[repr(C)]
        pub struct LogSettings {
            pub log_output: root::mlperf::LogOutputSettings,
            pub log_mode: root::mlperf::LoggingMode,
            pub log_mode_async_poll_interval_ms: u64,
            pub enable_trace: bool,
        }
        #[test]
        fn bindgen_test_layout_LogSettings() {
            assert_eq!(
                ::std::mem::size_of::<LogSettings>(),
                104usize,
                concat!("Size of: ", stringify!(LogSettings))
            );
            assert_eq!(
                ::std::mem::align_of::<LogSettings>(),
                8usize,
                concat!("Alignment of ", stringify!(LogSettings))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<LogSettings>())).log_output as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogSettings),
                    "::",
                    stringify!(log_output)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<LogSettings>())).log_mode as *const _ as usize },
                80usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogSettings),
                    "::",
                    stringify!(log_mode)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogSettings>())).log_mode_async_poll_interval_ms
                        as *const _ as usize
                },
                88usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogSettings),
                    "::",
                    stringify!(log_mode_async_poll_interval_ms)
                )
            );
            assert_eq!(
                unsafe {
                    &(*(::std::ptr::null::<LogSettings>())).enable_trace as *const _ as usize
                },
                96usize,
                concat!(
                    "Offset of field: ",
                    stringify!(LogSettings),
                    "::",
                    stringify!(enable_trace)
                )
            );
        }
        pub mod c {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub type ClientData = usize;
            pub type IssueQueryCallback = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::mlperf::c::ClientData,
                    arg2: *const root::mlperf::QuerySample,
                    arg3: root::size_t,
                ),
            >;
            pub type FlushQueriesCallback = ::std::option::Option<unsafe extern "C" fn()>;
            pub type ReportLatencyResultsCallback = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::mlperf::c::ClientData,
                    arg2: *const i64,
                    arg3: root::size_t,
                ),
            >;
            extern "C" {
                #[link_name = "\u{1}__ZN6mlperf1c20QuerySamplesCompleteEPNS_19QuerySampleResponseEm"]
                pub fn QuerySamplesComplete(
                    responses: *mut root::mlperf::QuerySampleResponse,
                    response_count: root::size_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}__ZN6mlperf1c12ConstructSUTEmPKcmPFvmPKNS_11QuerySampleEmEPFvvEPFvmPKxmE"]
                pub fn ConstructSUT(
                    client_data: root::mlperf::c::ClientData,
                    name: *const ::std::os::raw::c_char,
                    name_length: root::size_t,
                    issue_cb: root::mlperf::c::IssueQueryCallback,
                    flush_queries_cb: root::mlperf::c::FlushQueriesCallback,
                    report_latency_results_cb: root::mlperf::c::ReportLatencyResultsCallback,
                ) -> *mut ::std::os::raw::c_void;
            }
            extern "C" {
                #[link_name = "\u{1}__ZN6mlperf1c10DestroySUTEPv"]
                pub fn DestroySUT(sut: *mut ::std::os::raw::c_void);
            }
            pub type LoadSamplesToRamCallback = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::mlperf::c::ClientData,
                    arg2: *const root::mlperf::QuerySampleIndex,
                    arg3: root::size_t,
                ),
            >;
            pub type UnloadSamplesFromRamCallback = ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::mlperf::c::ClientData,
                    arg2: *const root::mlperf::QuerySampleIndex,
                    arg3: root::size_t,
                ),
            >;
            extern "C" {
                #[link_name = "\u{1}__ZN6mlperf1c12ConstructQSLEmPKcmmmPFvmPKmmES6_"]
                pub fn ConstructQSL(
                    client_data: root::mlperf::c::ClientData,
                    name: *const ::std::os::raw::c_char,
                    name_length: root::size_t,
                    total_sample_count: root::size_t,
                    performance_sample_count: root::size_t,
                    load_samples_to_ram_cb: root::mlperf::c::LoadSamplesToRamCallback,
                    unload_samlpes_from_ram_cb: root::mlperf::c::UnloadSamplesFromRamCallback,
                ) -> *mut ::std::os::raw::c_void;
            }
            extern "C" {
                #[link_name = "\u{1}__ZN6mlperf1c10DestroyQSLEPv"]
                pub fn DestroyQSL(qsl: *mut ::std::os::raw::c_void);
            }
            extern "C" {
                #[link_name = "\u{1}__ZN6mlperf1c9StartTestEPvS1_RKNS_12TestSettingsE"]
                pub fn StartTest(
                    sut: *mut ::std::os::raw::c_void,
                    qsl: *mut ::std::os::raw::c_void,
                    settings: *const root::mlperf::TestSettings,
                );
            }
        }
    }
}
